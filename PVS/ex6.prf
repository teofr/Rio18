(ex6
 (size_TCC1 0
  (size_TCC1-1 nil 3728292438 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Phonebook])" ex6 nil))
   nil))
 (find_phone_TCC1 0
  (find_phone_TCC1-1 nil 3728292438
   ("" (skeep) (("" (typepred "phonebook") (("" (grind) nil nil)) nil))
    nil)
   ((registered? def-decl "bool" ex6 nil)
    (Phonebook type-decl nil ex6 nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (find_phone_TCC2 0
  (find_phone_TCC2-1 nil 3728292438
   ("" (skeep) (("" (typepred phonebook) (("" (grind) nil nil)) nil))
    nil)
   ((registered? def-decl "bool" ex6 nil)
    (Phonebook type-decl nil ex6 nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3728292438 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Phonebook type-decl nil ex6 nil)
    (registered? def-decl "bool" ex6 nil))
   nil))
 (remove_correctness 0
  (remove_correctness-1 nil 3728292447
   ("" (lemma "Phonebook_induction")
    (("" (inst? -1)
      (("" (split)
        (("1" (propax) nil nil)
         ("2" (assert) (("2" (grind) nil nil)) nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (skeep 1)
              (("3" (expand registered? -2)
                (("3" (case "add_phone1_var = name!1")
                  (("1" (assert)
                    (("1" (hide -3)
                      (("1" (expand remove -3)
                        (("1"
                          (case "registered?(add_phone1_var, add_phone3_var)")
                          (("1" (assert)
                            (("1" (inst -3 "name!1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand remove -3)
                    (("2" (assert)
                      (("2" (expand registered? -3)
                        (("2" (assert)
                          (("2" (inst -1 "name!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Phonebook type-decl nil ex6 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (registered? def-decl "bool" ex6 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove def-decl "Phonebook" ex6 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Phonebook_induction formula-decl nil ex6 nil))
   shostak)))

