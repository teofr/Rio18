("bv_int" bv_int int2bv_TCC1 0 (int2bv_TCC1-1 nil 3341446105 3341448016 ("" (inst + "LAMBDA (iv: rng_2s_comp): inverse(bv2int)(iv)") (("" (skolem!) (("" (lemma "bv2int_bij") (("" (use "bijective_inverse[bvec[N], rng_2s_comp]") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((bijective_inverse formula-decl nil function_inverse nil) (bijective? const-decl "bool" functions nil) (bv2int_bij formula-decl nil bv_int nil) (inverse const-decl "D" function_inverse nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 14463 510 t nil))("bv_int" bv_int bv2int_TCC2 0 (bv2int_TCC2-1 nil 3341446105 3341446216 ("" (skosimp) (("" (expand* "maxint" "minint") (("" (assert) (("" (expand "exp2" 2 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (exp2 def-decl "posnat" exp2 nil)) 47576 950 t nil))("bv_int" bv_int bv2int_TCC1 0 (bv2int_TCC1-1 nil 3341446105 3341446106 ("" (subtype-tcc) nil nil) proved ((N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil)) 214 170 nil nil))("bv_int" bv_int bv_minint_to_maxint 0 (bv_minint_to_maxint-1 nil 3341446146 3341446148 ("" (expand* "maxint" "minint") (("" (assert) nil nil)) nil) proved ((maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil)) 1907 270 t shostak))("bv_int" bv_int bv_maxint_to_minint 0 (bv_maxint_to_minint-1 nil 3341446126 3341446144 ("" (expand* "maxint" "minint") (("" (assert) nil nil)) nil) proved ((maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil)) 18772 290 t shostak))("bv_int" bv_int minint_TCC1 0 (minint_TCC1-1 nil 3341446105 3341446105 ("" (subtype-tcc) nil nil) proved nil 59 60 nil nil))("bv_extend" bv_extend lsb_extend_TCC1 0 (lsb_extend_TCC1-1 nil 3341451346 3341451346 ("" (subtype-tcc) nil nil) proved nil 21 20 nil nil))("bv_extend" bv_extend sign_extend_TCC1 0 (sign_extend_TCC1-1 nil 3341451346 3341451346 ("" (subtype-tcc) nil nil) proved nil 72 70 nil nil))("bv_extend" bv_extend zero_extend_TCC1 0 (zero_extend_TCC1-1 nil 3341451346 3341451346 ("" (subtype-tcc) nil nil) proved nil 92 60 nil nil))("bv_arith_nat" bv_arith_nat times_TCC1 0 (times_TCC1-1 nil 3341430621 3341433650 ("" (inst + "LAMBDA (bv1, bv2: bvec[N]): nat2bv[2 * N](bv2nat(bv1) * bv2nat(bv2))") (("" (skolem!) (("" (assert) (("" (lemma "lt_times_lt_pos1") (("" (inst?) (("" (inst - "exp2(N)" "exp2(N)") (("" (use "exp2_sum") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lt_times_lt_pos1 formula-decl nil real_props nil) (exp2_sum formula-decl nil exp2 nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_arith_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 150977 3120 t nil))("bv_arith_nat" bv_arith_nat plus_TCC2 0 (plus_TCC2-1 nil 3341430621 3341430840 ("" (inst + "LAMBDA (bv1, bv2: bvec[N]): nat2bv(IF bv2nat(bv1) + bv2nat(bv2) < exp2(N) THEN bv2nat(bv1) + bv2nat(bv2) ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N) ENDIF)") (("" (skosimp) (("" (assert) nil nil)) nil)) nil) proved ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_arith_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 74928 800 t nil))("bv_arith_nat" bv_arith_nat bv_minus 0 (bv_minus-1 nil 3341430733 3341430752 ("" (expand "-") (("" (skolem!) (("" (rewrite "bv_plus") (("" (assert) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_arith_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv_plus formula-decl nil bv_arith_nat nil) (- const-decl "bvec[N]" bv_arith_nat nil)) 18561 760 t shostak))("bv_arith_nat" bv_arith_nat bv_plus 0 (bv_plus-1 nil 3341430709 3341430723 ("" (skolem!) (("" (assert) nil nil)) nil) proved nil 13144 500 t shostak))("bv_arith_nat" bv_arith_nat plus_TCC1 0 (plus_TCC1-1 nil 3341430621 3341430695 ("" (inst + "LAMBDA (bv: bvec[N], i: int): nat2bv(mod(bv2nat(bv) + i, exp2(N)))") nil nil) proved ((nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_arith_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 44335 470 t nil))("bv_arithmetic" bv_arithmetic difference_TCC1 0 (difference_TCC1-1 nil 3341510135 3341510356 ("" (inst + "LAMBDA (bv: bvec[N]): int2bv(IF bv2int[N](bv) = minint[N] THEN bv2int[N](bv) ELSE -((bv2int[N](bv))) ENDIF)") (("" (skosimp) (("" (typepred "bv2int[N](bv!1)") (("" (expand* "minint" "maxint") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (int2bv const-decl "{bv | bv2int(bv) = iv}" bv_int nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_arithmetic nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 63084 800 t nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 0 (bv_caret_concat_over_addition_1_TCC1-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 0 (bv_caret_concat_over_addition_1_TCC2-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 0 (bv_caret_concat_over_addition_1_TCC3-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 0 (bv_caret_concat_over_addition_1_TCC4-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 0 (bv_caret_concat_over_addition_1_TCC5-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 0 (bv_caret_concat_over_addition_1-1 nil 3507248001 nil ("" (skosimp*) (("" (rewrite "bv2nat_inj[n1!1+1]") (("" (hide 2) (("" (postpone) nil)))))) nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 0 (superrange_addition_TCC1-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 0 (superrange_addition_TCC2-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 0 (superrange_addition_TCC3-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 0 (superrange_addition_TCC4-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 0 (superrange_addition_TCC5-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 0 (superrange_addition_TCC6-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 0 (superrange_addition_TCC7-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 0 (superrange_addition_TCC8-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 0 (superrange_addition_TCC9-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 0 (superrange_addition_TCC10-1 nil 3507248001 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition 0 (superrange_addition-1 nil 3507248001 nil ("" (skosimp*) (("" (rewrite "bv_plus_caret" :dir rl) (("" (rewrite "bv_plus_caret" :dir rl) (("" (name-replace "BV" "bv1!1 + n!1 ") (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))))))))) nil) unchecked nil nil nil nil nil))("BitvectorOneComplementDivision" BitvectorOneComplementDivision divrem_mem_TCC6 0 (divrem_mem_TCC6-1 nil 3342401097 3342401106 ("" (termination-tcc) nil nil) proved-complete ((left_shift const-decl "bvec[N]" bv_shift nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 492 500 nil nil))("BitvectorOneComplementDivision" BitvectorOneComplementDivision divrem_mem_TCC5 0 (divrem_mem_TCC5-1 nil 3342401097 3342401106 ("" (subtype-tcc) nil nil) proved-complete ((below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorOneComplementDivision nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (left_shift const-decl "bvec[N]" bv_shift nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 690 650 nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 "" (SKOSIMP*) (("" (REWRITE "bv2nat_inj[n1!1+1]") (("" (HIDE 2) (("" (POSTPONE) NIL)))))))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition "" (SKOSIMP*) (("" (REWRITE "bv_plus_caret" :DIR RL) (("" (REWRITE "bv_plus_caret" :DIR RL) (("" (NAME-REPLACE "BV" "bv1!1 + n!1 ") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (GRIND) NIL)))))))))))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 0 (bv_caret_concat_over_addition_1_TCC1-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 0 (bv_caret_concat_over_addition_1_TCC2-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 0 (bv_caret_concat_over_addition_1_TCC3-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 0 (bv_caret_concat_over_addition_1_TCC4-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 0 (bv_caret_concat_over_addition_1_TCC5-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 0 (bv_caret_concat_over_addition_1-1 nil 3510633246 ("" (skosimp*) (("" (rewrite "bv2nat_inj[n1!1+1]") (("" (hide 2) (("" (postpone) nil)))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 0 (superrange_addition_TCC1-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 0 (superrange_addition_TCC2-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 0 (superrange_addition_TCC3-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 0 (superrange_addition_TCC4-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 0 (superrange_addition_TCC5-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 0 (superrange_addition_TCC6-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 0 (superrange_addition_TCC7-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 0 (superrange_addition_TCC8-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 0 (superrange_addition_TCC9-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 0 (superrange_addition_TCC10-1 nil 3510633246 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition 0 (superrange_addition-1 nil 3510633246 ("" (skosimp*) (("" (rewrite "bv_plus_caret" :dir rl) (("" (rewrite "bv_plus_caret" :dir rl) (("" (name-replace "BV" "bv1!1 + n!1 ") (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))))))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 0 (bv_caret_concat_over_addition_1_TCC1-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 0 (bv_caret_concat_over_addition_1_TCC2-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 0 (bv_caret_concat_over_addition_1_TCC3-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 0 (bv_caret_concat_over_addition_1_TCC4-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 0 (bv_caret_concat_over_addition_1_TCC5-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 0 (bv_caret_concat_over_addition_1-1 nil 3510975538 ("" (skosimp*) (("" (rewrite "bv2nat_inj[n1!1+1]") (("" (hide 2) (("" (postpone) nil)))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 0 (superrange_addition_TCC1-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 0 (superrange_addition_TCC2-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 0 (superrange_addition_TCC3-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 0 (superrange_addition_TCC4-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 0 (superrange_addition_TCC5-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 0 (superrange_addition_TCC6-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 0 (superrange_addition_TCC7-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 0 (superrange_addition_TCC8-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 0 (superrange_addition_TCC9-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 0 (superrange_addition_TCC10-1 nil 3510975538 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition 0 (superrange_addition-1 nil 3510975538 ("" (skosimp*) (("" (rewrite "bv_plus_caret" :dir rl) (("" (rewrite "bv_plus_caret" :dir rl) (("" (name-replace "BV" "bv1!1 + n!1 ") (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))))))))) nil) nil nil))("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition| "" (SKOSIMP*) (("" (REWRITE "bv_plus_caret" :DIR RL) (("" (REWRITE "bv_plus_caret" :DIR RL) (("" (NAME-REPLACE "BV" "bv1!1 + n!1 ") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (GRIND) NIL)))))))))))("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC10| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC9| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC8| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC7| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC6| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC5| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC4| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC3| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC2| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |superrange_addition_TCC1| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1| "" (SKOSIMP*) (("" (REWRITE "bv2nat_inj[n1!1+1]") (("" (HIDE 2) (("" (POSTPONE) NIL)))))))("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1_TCC5| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1_TCC4| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1_TCC3| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1_TCC2| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" |bv_arith_caret_concat_rules| |bv_caret_concat_over_addition_1_TCC1| "" (SUBTYPE-TCC) NIL)("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 0 (bv_caret_concat_over_addition_1_TCC1-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 0 (bv_caret_concat_over_addition_1_TCC2-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 0 (bv_caret_concat_over_addition_1_TCC3-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 0 (bv_caret_concat_over_addition_1_TCC4-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 0 (bv_caret_concat_over_addition_1_TCC5-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 0 (bv_caret_concat_over_addition_1-1 nil 3511145463 ("" (skosimp*) (("" (rewrite "bv2nat_inj[n1!1+1]") (("" (hide 2) (("" (postpone) nil)))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 0 (superrange_addition_TCC1-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 0 (superrange_addition_TCC2-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 0 (superrange_addition_TCC3-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 0 (superrange_addition_TCC4-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 0 (superrange_addition_TCC5-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 0 (superrange_addition_TCC6-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 0 (superrange_addition_TCC7-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 0 (superrange_addition_TCC8-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 0 (superrange_addition_TCC9-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 0 (superrange_addition_TCC10-1 nil 3511145463 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition 0 (superrange_addition-1 nil 3511145463 ("" (skosimp*) (("" (rewrite "bv_plus_caret" :dir rl) (("" (rewrite "bv_plus_caret" :dir rl) (("" (name-replace "BV" "bv1!1 + n!1 ") (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))))))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC1 0 (bv_caret_concat_over_addition_1_TCC1-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC2 0 (bv_caret_concat_over_addition_1_TCC2-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC3 0 (bv_caret_concat_over_addition_1_TCC3-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC4 0 (bv_caret_concat_over_addition_1_TCC4-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1_TCC5 0 (bv_caret_concat_over_addition_1_TCC5-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules bv_caret_concat_over_addition_1 0 (bv_caret_concat_over_addition_1-1 nil 3511760628 ("" (skosimp*) (("" (rewrite "bv2nat_inj[n1!1+1]") (("" (hide 2) (("" (postpone) nil)))))) nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC1 0 (superrange_addition_TCC1-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC2 0 (superrange_addition_TCC2-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC3 0 (superrange_addition_TCC3-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC4 0 (superrange_addition_TCC4-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC5 0 (superrange_addition_TCC5-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC6 0 (superrange_addition_TCC6-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC7 0 (superrange_addition_TCC7-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC8 0 (superrange_addition_TCC8-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC9 0 (superrange_addition_TCC9-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition_TCC10 0 (superrange_addition_TCC10-1 nil 3511760628 ("" (subtype-tcc) nil nil) nil nil))("bv_arith_caret_concat_rules" bv_arith_caret_concat_rules superrange_addition 0 (superrange_addition-1 nil 3511760628 ("" (skosimp*) (("" (rewrite "bv_plus_caret" :dir rl) (("" (rewrite "bv_plus_caret" :dir rl) (("" (name-replace "BV" "bv1!1 + n!1 ") (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))))))))) nil) nil nil))